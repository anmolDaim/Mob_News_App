package com.mobnews.app.Activity

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.text.SpannableString
import android.text.Spanned
import android.text.style.ForegroundColorSpan
import android.util.Log
import android.view.View
import com.mobnews.app.DataClass.Data1.Article
import android.widget.ImageView
import android.widget.ProgressBar
import android.widget.RadioGroup
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.AppCompatButton
import androidx.browser.customtabs.CustomTabsIntent
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.gms.ads.AdRequest
import com.google.android.gms.ads.AdView
import com.google.android.gms.ads.MobileAds
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.mobnews.app.Adapter.ItemsAdapter
import com.mobnews.app.ApiInterface.ApiInterface
import com.mobnews.app.DataClass.Data1
import com.mobnews.app.R
import com.squareup.picasso.Picasso
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory


class ReadingActivity : AppCompatActivity(), ItemsAdapter.OnFavoriteSelectedListener {
    lateinit var imageHeadline:ImageView
    lateinit var titleTextView:TextView
    lateinit var authortextView:TextView
    lateinit var DateTextView:TextView
    lateinit var descriptionTextView:TextView
    lateinit var contentTextView:TextView
    lateinit var backBtn:ImageView
    lateinit var http_link:TextView
    lateinit var suggestedRecyclerView: RecyclerView
    lateinit var progressBar2: ProgressBar
    lateinit var Adapter:ItemsAdapter
    lateinit var adView: AdView
    lateinit var disclaimer: TextView
    lateinit var shareReading:ConstraintLayout
    lateinit var favouriteReading:ConstraintLayout
    lateinit var fontSizeReading:ConstraintLayout
    private var isFavorite: Boolean = false


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_reading)
        imageHeadline=findViewById(R.id.imageHeadline)
        titleTextView=findViewById(R.id.titleTextView)
        authortextView=findViewById(R.id.authortextView)
        DateTextView=findViewById(R.id.DateTextView)
        descriptionTextView=findViewById(R.id.descriptionTextView)
        contentTextView=findViewById(R.id.contentTextView)
        backBtn=findViewById(R.id.backBtn)
        http_link=findViewById(R.id.http_link)
        suggestedRecyclerView=findViewById(R.id.suggestedRecyclerView)
        progressBar2=findViewById(R.id.progressBar2)
        disclaimer=findViewById(R.id.disclaimer)
        shareReading=findViewById(R.id.shareReading)
        favouriteReading=findViewById(R.id.favouriteReading)
        fontSizeReading=findViewById(R.id.fontSizeReading)
        // Initialize the Mobile Ads SDK
        MobileAds.initialize(this) {}
        //FontSizeHelper.init(this)

        // Load the AdView from the layout
        adView = findViewById(R.id.adView)

//        // Set the ad unit ID (only once per activity lifecycle)
//        adView.adUnitId = "ca-app-pub-1095072040188201~9751225647"
//
//        // Set the ad size
//        adView.adSize = AdSize.LARGE_BANNER

        // Load the ad
        val adRequest = AdRequest.Builder().build()
        adView.loadAd(adRequest)

        //disclaimer text
        val baseText = "Disclaimer: This News Story is auto generated by computer program and has not been created or edited by Mob News."
        val spannable = SpannableString(baseText)


// Change the color of "Name:"
        val endIndex = baseText.indexOf(":") + 1 // Assuming you want to color "Name:" only
//        spannable.setSpan(
//            ForegroundColorSpan(Color.BLACK),
//            0,
//            endIndex,
//            Spanned.SPAN_EXCLUSIVE_EXCLUSIVE
//        )

        disclaimer.setText(spannable)


        backBtn.setOnClickListener {
            super.onBackPressed()
        }


        //creating font size dialog box method
        fontSizeReading.setOnClickListener(){
            showFontSizeDialog()
        }

//        val isFavorite = intent.getBooleanExtra("isFavorite", false)
//        updateFavoriteReadingUI(isFavorite)

        // Get intent data
        // Retrieve article data from intent extras
        val author = intent.getStringExtra("author")
        val content = intent.getStringExtra("content")
        val description = intent.getStringExtra("description")
        val publishedAt = intent.getStringExtra("publishedAt")
        // Extract the date portion up to 'T' letter from the publishedAt string
        val indexOfT = publishedAt?.indexOf('T')
        val dateSubstring = if (indexOfT != -1) {
            if (indexOfT != null) {
                publishedAt?.substring(0, indexOfT)
            } else {
                Log.d("dateString","$indexOfT")
            }
        } else {
            publishedAt
        }
        val title = intent.getStringExtra("title")
        val urlToImage = intent.getStringExtra("urlToImage")
        val url=intent.getStringExtra("urlToChrome")
        val defaultImageResId = intent.getIntExtra("defaultImageResId",
            R.drawable.no_image_placeholder
        )
        val categoryCode = intent.getStringExtra("categoryCode")
        when (categoryCode) {
            "Hot News" -> fetchTopHeadlines("TopHeadline")
            "business" -> fetchBusinessNews("business")
            "entertainment" -> fetchEntertainmentNews("entertainment")
            "general" -> fetchGeneralNews("General")
            "health"-> fetchHealthNews("Health")
            "science" -> fetchScienceNews("Science")
            "sports" -> fetchSportsNews("Sports")
            "technology"->fetchTechnologyyNews("Technology")

            // Add other cases for different category codes if needed
            else -> {
                // Default behavior or handle unknown category codes
            }
        }

        // Display article data in views
        titleTextView.text = title
        authortextView.text = author
        DateTextView.text = dateSubstring.toString()
        descriptionTextView.text = description
        contentTextView.text = content
        //http_link.text=url
        // Load image using Picasso or any other image loading library
        if (urlToImage.isNullOrEmpty()) {
            // If urlToImage is null or empty, load default image
            imageHeadline.setImageResource(defaultImageResId)
            imageHeadline.scaleType = ImageView.ScaleType.FIT_CENTER
        } else {
            // If urlToImage is not null or empty, load image from URL using Picasso or any other image loading library
            Picasso.get().load(urlToImage).into(imageHeadline)
        }

        val newsSourceString = "News Source: "
        val fullNewsSourceString = "$newsSourceString$url"
        val spannedNewsSourceString = SpannableString(fullNewsSourceString)
        val greenColor = ContextCompat.getColor(this, R.color.green)
        val blackColor = ContextCompat.getColor(this, R.color.skyBlue)
        spannedNewsSourceString.setSpan(
            ForegroundColorSpan(greenColor),
            0,
            newsSourceString.length,
            Spanned.SPAN_EXCLUSIVE_EXCLUSIVE
        )

        spannedNewsSourceString.setSpan(
            ForegroundColorSpan(blackColor),
            newsSourceString.length,
            fullNewsSourceString.length,
            Spanned.SPAN_EXCLUSIVE_EXCLUSIVE
        )
        http_link.text= spannedNewsSourceString


        http_link.setOnClickListener {
            // Get the URL from the TextView
            val fullUrl = http_link.text.toString()

            // Check if the URL is not empty
            if (fullUrl.isNotEmpty()) {
                // Extract the URL after the colon
                val url = fullUrl.substringAfter(": ")
                openChromeTab(url)

//                // Create an Intent to view the URL
//                val intent = Intent(this@ReadingActivity, WebViewActivity::class.java).apply {
//                    putExtra("url", url)
//                }
//                // Start WebViewActivity
//                startActivity(intent)
            } else {
                // Display a toast message if the URL is empty
                http_link.text = "No url"
            }
        }

        shareReading.setOnClickListener {
            // Get the URL from the TextView
            val newsSourceLink = http_link.text.toString()
            val url = newsSourceLink.substringAfter(": ")

            // Create the intent
            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                putExtra(Intent.EXTRA_TEXT, url)
                type = "text/plain"
            }

            // Start the activity to show the share options
            val chooser = Intent.createChooser(shareIntent, "Share via")
            if (shareIntent.resolveActivity(packageManager) != null) {
                startActivity(chooser)
            } else {
                // If no apps are available to handle the intent, show a toast
                Toast.makeText(this, "No apps available to handle this action", Toast.LENGTH_SHORT).show()
            }
        }

fetchTopHeadlines("Hot News")
//        progressBar2.visibility = View.VISIBLE
//        val logging = HttpLoggingInterceptor()
//        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
//        val client = OkHttpClient.Builder()
//            .addInterceptor(logging)
//            .build()
//
//        val retroIns= Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(
//            GsonConverterFactory.create()).build()
//
//        val call=retroIns.create(ApiInterface::class.java)
//        call.getApiData("us","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object : Callback<Data1> {
//            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
//                if (response.isSuccessful) {
//                    val responseBody = response.body()
//                    responseBody?.let {
//                        val productList = it.articles.filter { article ->
//                            !article.author.isNullOrEmpty() &&
//                                    !article.title.isNullOrEmpty() &&
//                                    !article.urlToImage.isNullOrEmpty()
//                        }.shuffled().toMutableList()
//                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
//                        suggestedRecyclerView.layoutManager = linearLayout
//                        val catAdapter = ItemsAdapter(
//                            this@ReadingActivity,
//                            productList,
//                            { article ->
//                                // Handle item click here for reading
//                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
//                                    putExtra("author", article.author)
//                                    putExtra("content", article.content)
//                                    putExtra("description", article.description)
//                                    putExtra("publishedAt", article.publishedAt)
//                                    putExtra("title", article.title)
//                                    putExtra("urlToImage", article.urlToImage)
//                                    putExtra("categoryCode", categoryCode)
//                                }
//                                startActivity(intent)
//                            },
//                            this@ReadingActivity
//                        )
//                        // Set the onClickListener for the favoriteReading view
//                        favouriteReading.setOnClickListener {
//                            val currentArticle = Article(
//                                author = authortextView.text.toString(),
//                                content = contentTextView.text.toString(),
//                                description = descriptionTextView.text.toString(),
//                                publishedAt = DateTextView.text.toString(),
//                                source = null, // You can set the source to null if it's not being used
//                                title = titleTextView.text.toString(),
//                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
//                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
//                            )
//                            onFavoriteSelected(currentArticle)
//                        }
//                        suggestedRecyclerView.adapter = catAdapter
//                        progressBar2.visibility = View.GONE
//                    } ?: Log.e("HomeFragment", "Response body is null")
//                } else {
//                    Log.e("HomeFragment", "Response failed: ${response.code()}")
//                    progressBar2.visibility = View.GONE
//                }
//            }
//
//            override fun onFailure(call: Call<Data1>, t: Throwable) {
//                Log.e("HomeFragment", "API call failed: ${t.message}")
//            }
//        })


    }

    override fun onFavoriteSelected(article: Data1.Article) {
        val gson = Gson()
        val sharedPreferences = this.getSharedPreferences("article_data", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()

        // Retrieve existing article list from SharedPreferences
        val articleListJson = sharedPreferences.getString("articleList", null)
        val type = object : TypeToken<MutableList<Data1.Article>>() {}.type
        val existingArticleList: MutableList<Data1.Article> = gson.fromJson(articleListJson, type) ?: mutableListOf()

        // Check if the article already exists in the list
        val existingArticle = existingArticleList.find { it.title == article.title }

        if (existingArticle != null) {
            // Remove the article from the existing list
            existingArticleList.remove(existingArticle)

            // Convert the updated list to JSON string
            val updatedArticleListJson = gson.toJson(existingArticleList)

            // Store the updated JSON string in SharedPreferences
            editor.putString("articleList", updatedArticleListJson)
            editor.apply()

            Toast.makeText(this, "Removed from favorites", Toast.LENGTH_SHORT).show()

            // Notify the adapter about the item removal
            (suggestedRecyclerView.adapter as ItemsAdapter).unmarkAsFavorite(article)
        } else {
            // Add the new article to the existing list
            existingArticleList.add(article)

            // Convert the updated list to JSON string
            val updatedArticleListJson = gson.toJson(existingArticleList)

            // Store the updated JSON string in SharedPreferences
            editor.putString("articleList", updatedArticleListJson)
            editor.apply()

            Toast.makeText(this, "Added to favorites", Toast.LENGTH_SHORT).show()

            // Notify the adapter about the item change
            (suggestedRecyclerView.adapter as ItemsAdapter).markAsFavorite(article)
        }
    }


    fun showFontSizeDialog() {
        val dialogView = layoutInflater.inflate(R.layout.dialog_font_size, null)
        val dialogBuilder = AlertDialog.Builder(this, R.style.CustomAlertDialogStyle)
            .setView(dialogView)
        val dialog = dialogBuilder.show()

        dialogView.findViewById<AppCompatButton>(R.id.buttonApply).setOnClickListener {
            val radioGroup = dialogView.findViewById<RadioGroup>(R.id.radioGroup)
            val selectedRadioButtonId = radioGroup.checkedRadioButtonId

            val selectedFontSize = when (selectedRadioButtonId) {
                R.id.radioButtonSmall -> 15f // Define your small font size here
                R.id.radioButtonMedium -> 18f // Define your medium font size here
                R.id.radioButtonLarge -> 22f // Define your large font size here
                else -> 20f // Default to medium if none selected
            }

            // Apply the selected font size to the specific TextViews
            titleTextView.textSize = selectedFontSize
            authortextView.textSize = selectedFontSize
            DateTextView.textSize = selectedFontSize
            descriptionTextView.textSize = selectedFontSize
            contentTextView.textSize = selectedFontSize
            http_link.textSize=selectedFontSize
            disclaimer.textSize=selectedFontSize
            dialog.dismiss()
        }
    }

    // Inside your activity class
    fun openChromeTab(url: String) {
        val builder = CustomTabsIntent.Builder()
        val customTabsIntent = builder.build()
        customTabsIntent.launchUrl(this, Uri.parse(url))
    }
    private fun fetchTechnologyyNews( technology:String){


        val categoryCode: String=technology
        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","technology","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        // Set the onClickListener for the favoriteReading view
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)

                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                        progressBar2.visibility = View.GONE

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
                    fetchArticlesFromFirebase("Technology")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }
    private fun fetchSportsNews( sports:String){

        val categoryCode: String=sports

        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","sports","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
                        // Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
                    fetchArticlesFromFirebase("Sports")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
                progressBar2.visibility = View.GONE
            }


        })
    }

    private fun fetchScienceNews(science:String){

        val categoryCode: String=science
        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","science","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
                        // Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                        progressBar2.visibility = View.GONE

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
                    fetchArticlesFromFirebase("Science")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }

    private fun fetchHealthNews(health:String) {

        val categoryCode: String=health
        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","health","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
                        // Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter


                    } ?: Log.e("HomeFragment", "Response body is null")
                    progressBar2.visibility = View.GONE
                } else {
                    Log.e("HomeFragment", "RespoprogressBar.visibility = View.GONE")
fetchArticlesFromFirebase("Health")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }

    private fun fetchGeneralNews(general:String) {

        val categoryCode: String=general
        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","general","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
                        // Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                        progressBar2.visibility = View.GONE

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
                    fetchArticlesFromFirebase("General")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }

    private fun fetchEntertainmentNews(entertainment: String) {

        val categoryCode: String=entertainment
        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","entertainment","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
                        // Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                        progressBar2.visibility = View.GONE

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
                    fetchArticlesFromFirebase("entertainment")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }

    private fun fetchBusinessNews(business: String) {

        val categoryCode: String=business

        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.categoryApiData("us","business","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
                        // Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                        progressBar2.visibility = View.GONE

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
fetchArticlesFromFirebase("business")
                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }

    private fun fetchTopHeadlines(topHeadline:String) {
val categoryCode=topHeadline
        progressBar2.visibility = View.VISIBLE
        val logging = HttpLoggingInterceptor()
        logging.setLevel(HttpLoggingInterceptor.Level.BODY)
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retroIns=Retrofit.Builder().baseUrl("https://newsapi.org/").client(client).addConverterFactory(GsonConverterFactory.create()).build()

        val call=retroIns.create(ApiInterface::class.java)
        call.getApiData("us","46bbdd49ab6148fbb7c6091ef59e42d2").enqueue(object :Callback<Data1>{
            override fun onResponse(call: Call<Data1>, response: Response<Data1>) {
                if (response.isSuccessful) {
                    val responseBody = response.body()
                    responseBody?.let {
                        val productList = it.articles.filter { article ->
                            !article.author.isNullOrEmpty() &&
                                    !article.title.isNullOrEmpty() &&
                                    !article.urlToImage.isNullOrEmpty()
                        }.shuffled().toMutableList()
                        val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                        suggestedRecyclerView.layoutManager = linearLayout
                        val catAdapter = ItemsAdapter(
                            this@ReadingActivity,
                            productList,
                            { article ->
                                // Handle item click here for reading
                                val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                                    putExtra("author", article.author)
                                    putExtra("content", article.content)
                                    putExtra("description", article.description)
                                    putExtra("publishedAt", article.publishedAt)
                                    putExtra("title", article.title)
                                    putExtra("urlToImage", article.urlToImage)
                                    putExtra("urlToChrome", article.url)
                                    putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                                    putExtra("categoryCode", categoryCode)
                                    putExtra("isFavorite", isArticleFavorite(article))
                                }
                                startActivity(intent)
                            },
                            this@ReadingActivity
                        )
                        val isFavorite = intent.getBooleanExtra("isFavorite", false)
                        updateFavoriteReadingUI(isFavorite)
// Set the onClickListener for the favoriteReading view
                        favouriteReading.setOnClickListener {
                            val currentArticle = Article(
                                author = authortextView.text.toString(),
                                content = contentTextView.text.toString(),
                                description = descriptionTextView.text.toString(),
                                publishedAt = DateTextView.text.toString(),
                                source = null, // You can set the source to null if it's not being used
                                title = titleTextView.text.toString(),
                                url = http_link.text.toString(), // You can set the URL to null if it's not being used
                                urlToImage = intent.getStringExtra("urlToImage") ?: ""
                            )
                            onFavoriteSelected(currentArticle)
                            // Update UI of favouriteReading view
                            updateFavoriteReadingUI(!isFavorite)
                        }
                        suggestedRecyclerView.adapter = catAdapter

                        progressBar2.visibility = View.GONE

                    } ?: Log.e("HomeFragment", "Response body is null")
                } else {
                    Log.e("HomeFragment", "Response failed: ${response.code()}")
                   fetchArticlesFromFirebase("TopHeadline")

                }
            }

            override fun onFailure(call: Call<Data1>, t: Throwable) {
                Log.e("HomeFragment", "API call failed: ${t.message}")
            }


        })
    }
    private fun fetchArticlesFromFirebase(categoryCode: String) {

        Log.d("fetchArticlesFromFirebase", "entering into the fetching data from firebase method")

        progressBar2.visibility = View.VISIBLE
        val database = FirebaseDatabase.getInstance()
        val articlesRef = database.getReference("articles").child(categoryCode)

        articlesRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                val articlesList = mutableListOf<Data1.Article>()

                for (articleSnapshot in dataSnapshot.children) {
                    val author = articleSnapshot.child("author").value as? String ?: ""
                    val content = articleSnapshot.child("content").value as? String ?: ""
                    val description = articleSnapshot.child("description").value as? String ?: ""
                    val publishedAt = articleSnapshot.child("publishedAt").value as? String ?: ""
                    val title = articleSnapshot.child("title").value as? String ?: ""
                    val url = articleSnapshot.child("url").value as? String ?: ""
                    val urlToImage = articleSnapshot.child("urlToImage").value as? String ?: ""


                    Log.d("FirebaseData", "Author: ${articleSnapshot.child("author").value}")
                    Log.d("FirebaseData", "Title: ${articleSnapshot.child("title").value}")
                    // Handle nullable Source
                    // Check if essential fields are not empty
                    if (author.isNotEmpty() && title.isNotEmpty() && urlToImage.isNotEmpty()) {
                        // Handle nullable Source
                        val sourceSnapshot = articleSnapshot.child("source")
                        val source = if (sourceSnapshot.exists()) {
                            val sourceId = sourceSnapshot.child("id").value as? String ?: ""
                            val sourceName = sourceSnapshot.child("name").value as? String ?: ""
                            Data1.Article.Source(sourceId, sourceName)
                        } else {
                            null
                        }


                        val article = Data1.Article(
                            author,
                            content,
                            description,
                            publishedAt,
                            source,
                            title,
                            url,
                            urlToImage
                        )
                        articlesList.add(article)
                    }

                }
                articlesList.shuffle()
                // Update RecyclerView with the new data
                val linearLayout = LinearLayoutManager(this@ReadingActivity, LinearLayoutManager.VERTICAL, false)
                suggestedRecyclerView.layoutManager = linearLayout
                val catAdapter = ItemsAdapter(this@ReadingActivity, articlesList, { article ->
                    // Handle item click here for reading
                    val intent = Intent(this@ReadingActivity, ReadingActivity::class.java).apply {
                        putExtra("author", article.author)
                        putExtra("content", article.content)
                        putExtra("description", article.description)
                        putExtra("publishedAt", article.publishedAt)
                        putExtra("title", article.title)
                        putExtra("urlToImage", article.urlToImage)
                        putExtra("urlToChrome", article.url)
                        putExtra("defaultImageResId", R.drawable.no_image_placeholder)
                        putExtra("categoryCode", categoryCode)
                    }
                    startActivity(intent)
                }, this@ReadingActivity)
                // Set the onClickListener for the favoriteReading view
                favouriteReading.setOnClickListener {
                    val currentArticle = Article(
                        author = authortextView.text.toString(),
                        content = contentTextView.text.toString(),
                        description = descriptionTextView.text.toString(),
                        publishedAt = DateTextView.text.toString(),
                        source = null, // You can set the source to null if it's not being used
                        title = titleTextView.text.toString(),
                        url = http_link.text.toString(), // You can set the URL to null if it's not being used
                        urlToImage = intent.getStringExtra("urlToImage") ?: ""
                    )
                    onFavoriteSelected(currentArticle)
                    // Update UI of favouriteReading view
                    updateFavoriteReadingUI(true)
                }
                suggestedRecyclerView.adapter = catAdapter
                Log.d("FirebaseData", "RecyclerView updated with Firebase data")
                progressBar2.visibility = View.GONE
            }

            override fun onCancelled(databaseError: DatabaseError) {
                Log.e("FirebaseError", "Error fetching data from Firebase: ${databaseError.message}")
            }
        })
    }

    private fun updateFavoriteReadingUI(isFavorite: Boolean) {
        if (isFavorite) {
            favouriteReading.setBackgroundResource(R.drawable.saved_bg) // set your favorite background
            favouriteReading.findViewById<ImageView>(R.id.fav_image).setImageResource(R.drawable.saved_icon) // set your favorite icon
        } else {
            favouriteReading.setBackgroundResource(R.drawable.icons_bg) // set your default background
            favouriteReading.findViewById<ImageView>(R.id.fav_image).setImageResource(R.drawable.favourite_icon) // set your default icon
        }
    }
    private fun isArticleFavorite(article: Data1.Article): Boolean {
        val sharedPreferences = this.getSharedPreferences("article_data", Context.MODE_PRIVATE)
        val articleListJson = sharedPreferences.getString("articleList", null)
        val type = object : TypeToken<MutableList<Data1.Article>>() {}.type
        val existingArticleList: MutableList<Data1.Article> = Gson().fromJson(articleListJson, type) ?: mutableListOf()
        return existingArticleList.any { it.title == article.title }
    }


}